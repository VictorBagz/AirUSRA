// Wait for Supabase to be ready
function waitForSupabase() {
    return new Promise((resolve, reject) => {
        if (window.supabaseClient) {
            resolve(window.supabaseClient);
            return;
        }

        let attempts = 0;
        const maxAttempts = 20;
        const interval = 250;

        const checkSupabase = () => {
            if (window.supabaseClient) {
                resolve(window.supabaseClient);
                return;
            }

            attempts++;
            if (attempts >= maxAttempts) {
                reject(new Error('Supabase client not available'));
                return;
            }

            setTimeout(checkSupabase, interval);
        };

        checkSupabase();
    });
}

document.addEventListener("DOMContentLoaded", async () => {
    // Since createClient.js runs before this, window.supabase should exist.
    const supabaseClient = window.supabase;

    if (!supabaseClient) {
        console.error("Supabase client not initialized. Check script loading order.");
        alert("A critical error occurred. Please refresh the page.");
        return;
    }

    try {
        console.log('Using Supabase client for session check');
        
        // Check if we're already signed in
        const { data, error } = await supabaseClient.auth.getSession();
        
        if (error) {
            throw error;
        }
        
        if (data && data.session) {
            // Already signed in, redirect to profile
            await redirectToProfile(data.session.user.id);
            return;
        }
    } catch (error) {
        console.error('Session check error:', error);
        // Continue with the sign-in form even if session check fails
    }

    const signInForm = document.getElementById("signInForm");
    const passwordInput = document.getElementById("password");
    const passwordToggle = document.querySelector(".password-toggle");
    const submitBtn = signInForm.querySelector('button[type="submit"]');
    const errorDisplay = document.getElementById("error-message");

    // ----- MOVE showError and hideError FUNCTIONS OUTSIDE -----

// Function to display errors - NOW IN THE GLOBAL SCOPE
const showError = (message) => {
    const errorDisplay = document.getElementById("error-message");
    if (errorDisplay) {
        errorDisplay.textContent = message;
        errorDisplay.style.display = "block";
        setTimeout(() => { errorDisplay.style.opacity = "1"; }, 10);
    }
};

// Function to hide errors - NOW IN THE GLOBAL SCOPE
const hideError = () => {
    const errorDisplay = document.getElementById("error-message");
    if (errorDisplay) {
        errorDisplay.style.opacity = "0";
        setTimeout(() => { errorDisplay.style.display = "none"; }, 300);
    }
};


// The rest of your functions like fetchUserData and redirectToProfile stay here...
// async function fetchUserData(userId) { ... }
// async function redirectToProfile(userId) { ... }


document.addEventListener("DOMContentLoaded", async ()
    const supabaseClient = window.supabase;
});
    // Function to fetch user profile and school data
    async function fetchUserData(userId) {
        try {
            const client = await getSupabaseClient();
            // Fetch profile data
            const { data: profile, error: profileError } = await client
                .from('profiles')
                .select(`
                    *,
                    schools:school_id (
                        id,
                        school_name,
                        center_number,
                        school_email,
                        region,
                        district
                    )
                `)
                .eq('id', userId)
                .single();

            if (profileError) throw profileError;
            return profile;
        } catch (error) {
            console.error('Error fetching user data:', error);
            throw error;
        }
    }

    // Function to handle redirect
async function fetchUserData(userId) {
    try {
        const client = await getSupabaseClient();
        // This query uses .single() which fails if no user is found
        const { data: profile, error: profileError } = await client
            .from('profiles')
            .select(`
                *,
                schools:school_id (
                    id,
                    school_name,
                    center_number,
                    school_email,
                    region,
                    district
                )
            `)
            .eq('id', userId)
            .single();

        if (profileError) throw profileError;
        return profile;
    } catch (error) {
        console.error('Error fetching user data:', error);
        throw error;
    }
}

    signInForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        hideError();
        
        const email = document.getElementById("email").value;
        const password = passwordInput.value;

        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Signing In...';

        try {
            // Get the initialized Supabase client
            const supabaseClient = await getSupabaseClient();
            
            const { data, error } = await supabaseClient.auth.signInWithPassword({
                email,
                password
            });

            if (error) throw error;

            // Successful sign-in
            await redirectToProfile(data.user.id);

        } catch (error) {
            console.error("Sign-In Error:", error);
            showError(error.message || "Failed to sign in. Please check your credentials.");
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = 'Sign In';
        }
    });

    // Password visibility toggle
    if (passwordToggle && passwordInput) {
        passwordToggle.addEventListener("click", () => {
            const type = passwordInput.getAttribute("type") === "password" ? "text" : "password";
            passwordInput.setAttribute("type", type);
            passwordToggle.classList.toggle("fa-eye");
            passwordToggle.classList.toggle("fa-eye-slash");
        });
    }
});
